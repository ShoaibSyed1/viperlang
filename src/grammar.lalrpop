use std::str::FromStr;

use ast::{Arg, BinOp, Block, Class, Expr, Field, Function, ItemPath, Literal, MakeArg, Method, Module, Param, Stmt, Type, UnOp};
use grammar_util::{ModuleItem, ClassItem};

grammar;

pub Module: Module = <ModuleItem*> => {
    let mut classes = Vec::new();
    let mut functions = Vec::new();

    for item in <> {
        match item {
            ModuleItem::Class(class) => classes.push(class),
            ModuleItem::Function(function) => functions.push(function),
        }
    }

    Module {
        classes: classes,
        functions: functions,
    }
};

ModuleItem: ModuleItem = {
    <Class> => ModuleItem::Class(<>),
    <Function> => ModuleItem::Function(<>),
};

Class: Class = {
    "class" <i:Ident> "{" <items:ClassItem*> "}" => {
        let mut static_fields = Vec::new();
        let mut fields = Vec::new();
        let mut functions = Vec::new();
        let mut methods = Vec::new();
        for item in items {
            match item {
                ClassItem::StaticField(field) => static_fields.push(field),
                ClassItem::Field(field) => fields.push(field),
                ClassItem::Function(function) => functions.push(function),
                ClassItem::Method(method) => methods.push(method),
            }
        }

        Class {
            name: i,
            static_fields: static_fields,
            fields: fields,
            functions: functions,
            methods: methods,
        }
    }
};

ClassItem: ClassItem = {
    "class" <Field> => ClassItem::StaticField(<>),
    <Field> => ClassItem::Field(<>),
    "class" <Function> => ClassItem::Function(<>),
    <Method> => ClassItem::Method(<>),
};

Field: Field = "let" <i:Ident> ":" <t:Type> ";" => Field {
    name: i,
    ty: t,
};

Method: Method = <Function> => Method(<>);

Function: Function = {
    "fn" <i:Ident> "(" <params:Params> ")" <ret:(":" <Type>)?> "{" <b:Block> "}" => Function {
        name: i,
        params: params,
        ret: ret.unwrap_or(Type::Void),
        body: Expr::Block(b),
    },
    "fn" <i:Ident> "(" <params:Params> ")" <ret:(":" <Type>)?> "=" <e:Expr> ";" => Function {
        name: i,
        params: params,
        ret: ret.unwrap_or(Type::Void),
        body: e,
    },
};

Params: Vec<Param> = <params:(<Param> ",")*> <p:Param?> => {
    let mut params = params;
    if let Some(p) = p {
        params.push(p);
    }
    params
};

Param: Param = <i:Ident> ":" <t:Type> <d:("=" <Literal>)?> => Param {
    name: i,
    ty: t,
    default: d,
};

pub Block: Block = <s:Stmt*> <e:Expr?> => Block(s, Box::new(e.unwrap_or_else(|| Expr::Literal(Literal::Void))));

Stmt: Stmt = {
    "let" <i:Ident> <t:(":" <Type>)?> "=" <e:Expr> ";" => Stmt::Let(i, t, e),
    
    <a:Expr> "=" <e:Expr> ";" => Stmt::Assign(a, e),
    <a:Expr> "+=" <e:Expr> ";" => Stmt::Assign(a.clone(), Expr::BinOp(Box::new(a), BinOp::Add, Box::new(e))),
    <a:Expr> "-=" <e:Expr> ";" => Stmt::Assign(a.clone(), Expr::BinOp(Box::new(a), BinOp::Sub, Box::new(e))),
    <a:Expr> "*=" <e:Expr> ";" => Stmt::Assign(a.clone(), Expr::BinOp(Box::new(a), BinOp::Mul, Box::new(e))),
    <a:Expr> "/=" <e:Expr> ";" => Stmt::Assign(a.clone(), Expr::BinOp(Box::new(a), BinOp::Div, Box::new(e))),

    <e:Expr> ";" => Stmt::Expr(e),

    "return" <Expr?> ";" => Stmt::Return(<>.unwrap_or(Expr::Literal(Literal::Void))),
    "break" <Expr?> ";" => Stmt::Break(<>.unwrap_or(Expr::Literal(Literal::Void))),

    "print" "!" <e:Expr> ";" => Stmt::Print(e),
};

Expr: Expr = <ExprAdd> => <>;

ExprAdd: Expr = {
    <l:ExprAdd> "+" <r:ExprMul> => Expr::BinOp(Box::new(l), BinOp::Add, Box::new(r)),
    <l:ExprAdd> "-" <r:ExprMul> => Expr::BinOp(Box::new(l), BinOp::Sub, Box::new(r)),
    <ExprMul> => <>,
};

ExprMul: Expr = {
    <l:ExprMul> "*" <r:ExprEq> => Expr::BinOp(Box::new(l), BinOp::Mul, Box::new(r)),
    <l:ExprMul> "/" <r:ExprEq> => Expr::BinOp(Box::new(l), BinOp::Div, Box::new(r)),
    <ExprEq> => <>,
};

ExprEq: Expr = {
    <l:ExprEq> "==" <r:ExprCmp> => Expr::BinOp(Box::new(l), BinOp::Eq, Box::new(r)),
    <l:ExprEq> "!=" <r:ExprCmp> => Expr::BinOp(Box::new(l), BinOp::Neq, Box::new(r)),
    <ExprCmp> => <>,
};

ExprCmp: Expr = {
    <l:ExprCmp> ">" <r:ExprBool> => Expr::BinOp(Box::new(l), BinOp::Gt, Box::new(r)),
    <l:ExprCmp> ">=" <r:ExprBool> => Expr::BinOp(Box::new(l), BinOp::Gteq, Box::new(r)),
    <l:ExprCmp> "<" <r:ExprBool> => Expr::BinOp(Box::new(l), BinOp::Lt, Box::new(r)),
    <l:ExprCmp> "<=" <r:ExprBool> => Expr::BinOp(Box::new(l), BinOp::Lteq, Box::new(r)),

    <ExprBool> => <>,
};

ExprBool: Expr = {
    <l: ExprBool> "||" <r:ExprUnary> => Expr::BinOp(Box::new(l), BinOp::Or, Box::new(r)),
    <l: ExprBool> "&&" <r:ExprUnary> => Expr::BinOp(Box::new(l), BinOp::And, Box::new(r)),

    <ExprUnary> => <>,
};

ExprUnary: Expr = {
    "-" <ExprUnary> => Expr::UnOp(UnOp::Neg, Box::new(<>)),
    "!" <ExprUnary> => Expr::UnOp(UnOp::Not, Box::new(<>)),
    <ExprDot> => <>,
};

ExprDot: Expr = {
    <e:ExprDot> "." <i:Ident> => Expr::Dot(Box::new(e), i),
    <e:ExprDot> "(" <a:Args> ")" => Expr::Call(Box::new(e), a),
    <ExprPrimary> => <>,
};

ExprPrimary: Expr = {
    "(" <Expr> ")" => <>,
    "{" <Block> "}" => Expr::Block(<>),
    "cast" <t:Type> "(" <e:Expr> ")" => Expr::Cast(t, Box::new(e)),
    <Literal> => Expr::Literal(<>),
    <FlowExpr> => <>,
    "make" <e:ExprPrimary> "{" <a:MakeArgs> "}" => Expr::Make(Box::new(e), a),
    "some" "(" <e:Expr> ")" => Expr::OptionSome(Box::new(e)),
};

FlowExpr: Expr = {
    <IfExpr> => <>,
    <WhileExpr> => <>,
};

IfExpr: Expr = "if" <c:Expr> "{" <b:Block> "}" <el:Else?> => Expr::If(Box::new(c), b, el);

Else: Block = {
    "else" "{" <Block> "}" => <>,
    "else" "if" <c:Expr> "{" <b:Block> "}" <e:Else?> => Block(Vec::new(), Box::new(Expr::If(Box::new(c), b, e))),
};

WhileExpr: Expr = "while" <c:Expr> "{" <b:Block> "}" => Expr::While(Box::new(c), b);

Literal: Literal = {
    "void" => Literal::Void,
    "true" => Literal::Boolean(true),
    "false" => Literal::Boolean(false),
    <Float> => Literal::Float(<>),
    <Integer> => Literal::Integer(<>),
    <String> => Literal::String(<>),
    <ItemPath> => Literal::Ident(<>),
    "none" "(" <Type> ")" => Literal::None(<>),
};

Args: Vec<Arg> = <args:(<Arg> ",")*> <a1:Arg?> => {
    let mut args = args;
    if let Some(a1) = a1 {
        args.push(a1);
    }
    args
};

Arg: Arg = <name:(<Ident> ":")?> <expr:Expr> => Arg { name: name, expr: expr };

MakeArgs: Vec<MakeArg> = <margs:(<MakeArg> ",")*> <m1:MakeArg?> => {
    let mut margs = margs;
    if let Some(m1) = m1 {
        margs.push(m1);
    }
    margs
};

MakeArg: MakeArg = <name:Ident> ":" <expr:Expr> => MakeArg { name: name, expr: expr };

Type: Type = {
    "bool" => Type::Boolean,
    "int" => Type::Integer,
    "float" => Type::Float,
    "String" => Type::String,
    <Ident> => Type::Class(<>),
    "void" => Type::Void,
    "option" <Type> => Type::Option(Box::new(<>)),
};

ItemPath: ItemPath = <i1:Ident> <is:("::" <Ident>)*> => {
    let mut is = is;
    is.push(i1);
    ItemPath(is)
};

Float: f64 = <num:r"[0-9]+\.[0-9]+"> => f64::from_str(num).unwrap();
Integer: i64 = <num:r"[0-9]+"> => i64::from_str(num).unwrap();
String: String = <r#""[^"\\]*((\\.)*[^"\\]*)*""#> => <>[1..(<>.len()-1)].to_owned();

Ident: String = <r"[_a-zA-Z]+[_a-zA-Z0-9]*"> => <>.to_owned();